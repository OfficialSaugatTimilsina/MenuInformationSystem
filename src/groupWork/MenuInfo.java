/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package groupWork;

import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author acer
 */
public class MenuInfo extends javax.swing.JFrame {
    
    int arraySize = 0;
    int[] tablePrice = new int[0];
    ArrayList<Integer> dishNumberArrayList = new ArrayList<>();
    ArrayList<Integer> priceArrayList = new ArrayList<>();
    ArrayList<String> categoryArrayList = new ArrayList<>();
    ArrayList<String> dishArrayList = new ArrayList<>();
    /**
     * Creates new form ProjectGUI
     */
    public MenuInfo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupSpiciness = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        panelBG = new javax.swing.JPanel();
        panelMenu = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        logoImg = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tfSearchItem = new javax.swing.JTextField();
        panelSideBar = new javax.swing.JPanel();
        lblAddMenu = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        tfDishNumber = new javax.swing.JTextField();
        lblDishNo = new javax.swing.JLabel();
        tfDishName = new javax.swing.JTextField();
        lblDishName = new javax.swing.JLabel();
        lblDishCategory = new javax.swing.JLabel();
        rbHot = new javax.swing.JRadioButton();
        rbMild = new javax.swing.JRadioButton();
        rbLow = new javax.swing.JRadioButton();
        lblSpiciness = new javax.swing.JLabel();
        btnInsert = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        lbCheckItems = new javax.swing.JLabel();
        lblI = new javax.swing.JLabel();
        cbDishCategory = new javax.swing.JComboBox<>();
        cbSearchCategory = new javax.swing.JComboBox<>();
        btnCount = new javax.swing.JButton();
        tfPrice = new javax.swing.JTextField();
        lblDishName1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dishTable = new javax.swing.JTable();
        btnClearSelected = new javax.swing.JButton();
        btnClearAll = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuItemHelp = new javax.swing.JMenu();
        jMenuItemAbout = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menu Information System");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(172, 0, 80));

        panelBG.setBackground(new java.awt.Color(172, 0, 78));
        panelBG.setForeground(new java.awt.Color(172, 0, 78));

        panelMenu.setBackground(new java.awt.Color(172, 0, 76));
        panelMenu.setForeground(new java.awt.Color(199, 0, 76));

        btnSearch.setBackground(new java.awt.Color(172, 0, 76));
        btnSearch.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/groupWork/search.png"))); // NOI18N
        btnSearch.setText("Search Dishes");
        btnSearch.setToolTipText("");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        logoImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/groupWork/logo_icon.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("BatmanForeverAlternate", 0, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Menu Details");

        tfSearchItem.setForeground(new java.awt.Color(153, 153, 153));
        tfSearchItem.setText("100");
        tfSearchItem.setToolTipText("");
        tfSearchItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSearchItemActionPerformed(evt);
            }
        });
        tfSearchItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfSearchItemKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout panelMenuLayout = new javax.swing.GroupLayout(panelMenu);
        panelMenu.setLayout(panelMenuLayout);
        panelMenuLayout.setHorizontalGroup(
            panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMenuLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(logoImg)
                .addGap(142, 142, 142)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(167, 167, 167)
                .addComponent(tfSearchItem, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        panelMenuLayout.setVerticalGroup(
            panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logoImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tfSearchItem)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelMenuLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnSearch, tfSearchItem});

        panelSideBar.setBackground(new java.awt.Color(199, 0, 76));
        panelSideBar.setForeground(new java.awt.Color(172, 0, 76));

        lblAddMenu.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        lblAddMenu.setForeground(new java.awt.Color(255, 255, 255));
        lblAddMenu.setText("Add Records");

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));

        tfDishNumber.setForeground(new java.awt.Color(153, 153, 153));
        tfDishNumber.setText("1");
        tfDishNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDishNumberActionPerformed(evt);
            }
        });
        tfDishNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfDishNumberKeyTyped(evt);
            }
        });

        lblDishNo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblDishNo.setForeground(new java.awt.Color(255, 255, 255));
        lblDishNo.setText("Dish Number");

        tfDishName.setForeground(new java.awt.Color(153, 153, 153));
        tfDishName.setText("Dish");
        tfDishName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDishNameActionPerformed(evt);
            }
        });
        tfDishName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfDishNameKeyTyped(evt);
            }
        });

        lblDishName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblDishName.setForeground(new java.awt.Color(255, 255, 255));
        lblDishName.setText("Dish Name");

        lblDishCategory.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblDishCategory.setForeground(new java.awt.Color(255, 255, 255));
        lblDishCategory.setText("Dish Category");

        btnGroupSpiciness.add(rbHot);
        rbHot.setForeground(new java.awt.Color(255, 255, 255));
        rbHot.setSelected(true);
        rbHot.setText("Hot");
        rbHot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbHotActionPerformed(evt);
            }
        });

        btnGroupSpiciness.add(rbMild);
        rbMild.setForeground(new java.awt.Color(255, 255, 255));
        rbMild.setText("Mild");
        rbMild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMildActionPerformed(evt);
            }
        });

        btnGroupSpiciness.add(rbLow);
        rbLow.setForeground(new java.awt.Color(255, 255, 255));
        rbLow.setText("Low");
        rbLow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbLowActionPerformed(evt);
            }
        });

        lblSpiciness.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblSpiciness.setForeground(new java.awt.Color(255, 255, 255));
        lblSpiciness.setText("Spiciness");

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));

        lbCheckItems.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        lbCheckItems.setForeground(new java.awt.Color(255, 255, 255));
        lbCheckItems.setText("Check Items in Category");

        lblI.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblI.setForeground(new java.awt.Color(255, 255, 255));
        lblI.setText("Dish Category");

        cbDishCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Dish Category", "Chicken", "Lamb", "Mutton", "Pork", "Vegan" }));
        cbDishCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDishCategoryActionPerformed(evt);
            }
        });

        cbSearchCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chicken", "Lamb", "Mutton", "Pork", "Vegan" }));
        cbSearchCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSearchCategoryActionPerformed(evt);
            }
        });

        btnCount.setText("Find Dishes");
        btnCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCountActionPerformed(evt);
            }
        });

        tfPrice.setForeground(new java.awt.Color(153, 153, 153));
        tfPrice.setText("100");
        tfPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPriceActionPerformed(evt);
            }
        });
        tfPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfPriceKeyTyped(evt);
            }
        });

        lblDishName1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblDishName1.setForeground(new java.awt.Color(255, 255, 255));
        lblDishName1.setText("Dish Price");

        javax.swing.GroupLayout panelSideBarLayout = new javax.swing.GroupLayout(panelSideBar);
        panelSideBar.setLayout(panelSideBarLayout);
        panelSideBarLayout.setHorizontalGroup(
            panelSideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfPrice)
                    .addGroup(panelSideBarLayout.createSequentialGroup()
                        .addGroup(panelSideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfDishNumber)
                            .addComponent(lblI, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbCheckItems, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .addComponent(lblDishNo, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSideBarLayout.createSequentialGroup()
                                .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAddMenu, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDishName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbSearchCategory, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDishCategory, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSpiciness, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelSideBarLayout.createSequentialGroup()
                                .addComponent(rbHot)
                                .addGap(18, 18, 18)
                                .addComponent(rbMild)
                                .addGap(18, 18, 18)
                                .addComponent(rbLow))
                            .addComponent(lblDishName1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfDishName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbDishCategory, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(6, 6, 6))
        );

        panelSideBarLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {rbHot, rbLow, rbMild});

        panelSideBarLayout.setVerticalGroup(
            panelSideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSideBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAddMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(lblDishNo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfDishNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblDishName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfDishName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblDishCategory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbDishCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSpiciness)
                .addGap(9, 9, 9)
                .addGroup(panelSideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbHot)
                    .addComponent(rbMild)
                    .addComponent(rbLow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblDishName1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(btnInsert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbCheckItems, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbSearchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCount, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelSideBarLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cbDishCategory, cbSearchCategory, rbHot, rbLow, rbMild, tfDishName, tfDishNumber, tfPrice});

        panelSideBarLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnClear, btnCount});

        dishTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        dishTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        dishTable.setForeground(new java.awt.Color(51, 51, 51));
        dishTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Dish No.", "Dish Name", "Category", "Spiciness", "Price"
            }
        ));
        jScrollPane1.setViewportView(dishTable);

        btnClearSelected.setBackground(new java.awt.Color(199, 0, 76));
        btnClearSelected.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnClearSelected.setForeground(new java.awt.Color(255, 255, 255));
        btnClearSelected.setText("Clear Selected");
        btnClearSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSelectedActionPerformed(evt);
            }
        });

        btnClearAll.setBackground(new java.awt.Color(199, 0, 76));
        btnClearAll.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnClearAll.setForeground(new java.awt.Color(255, 255, 255));
        btnClearAll.setText("Clear all");
        btnClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBGLayout = new javax.swing.GroupLayout(panelBG);
        panelBG.setLayout(panelBGLayout);
        panelBGLayout.setHorizontalGroup(
            panelBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBGLayout.createSequentialGroup()
                .addComponent(panelSideBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBGLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 1072, Short.MAX_VALUE)
                            .addGroup(panelBGLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1058, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBGLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClearSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );

        panelBGLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnClearAll, btnClearSelected});

        panelBGLayout.setVerticalGroup(
            panelBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBGLayout.createSequentialGroup()
                .addGroup(panelBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBGLayout.createSequentialGroup()
                        .addComponent(panelMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnClearSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelSideBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jMenuBar1.setBackground(new java.awt.Color(199, 0, 76));
        jMenuBar1.setBorder(null);
        jMenuBar1.setForeground(new java.awt.Color(199, 0, 76));

        jMenu1.setText("File");

        jMenuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOpen.setIcon(new javax.swing.ImageIcon("B:\\photoshop\\Icon\\open25.png")); // NOI18N
        jMenuItemOpen.setText("Open");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemOpen);

        jMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemExit.setIcon(new javax.swing.ImageIcon("B:\\photoshop\\Icon\\exit25.png")); // NOI18N
        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        jMenuItemHelp.setText("Help");

        jMenuItemAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemAbout.setIcon(new javax.swing.ImageIcon("B:\\photoshop\\Icon\\book25.png")); // NOI18N
        jMenuItemAbout.setText("About");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenuItemHelp.add(jMenuItemAbout);

        jMenuHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuHelp.setIcon(new javax.swing.ImageIcon("B:\\photoshop\\Icon\\help25.png")); // NOI18N
        jMenuHelp.setText("How to use?");
        jMenuHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHelpActionPerformed(evt);
            }
        });
        jMenuItemHelp.add(jMenuHelp);

        jMenuBar1.add(jMenuItemHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBG, javax.swing.GroupLayout.PREFERRED_SIZE, 670, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPriceActionPerformed

    private void cbSearchCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSearchCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbSearchCategoryActionPerformed

    private void cbDishCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDishCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbDishCategoryActionPerformed
    
    public static boolean isNumeric(String str)
    {
        for (char c : str.toCharArray())
        {
            if (!Character.isDigit(c))
            {
                return false;
            }
        }
        return true;
    }
    
    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        // TODO add your handling code here:
        String dishNumber = tfDishNumber.getText();
        String dishName = tfDishName.getText();
        String price= tfPrice.getText();
        String dishCategory= cbDishCategory.getSelectedItem().toString();
        String spiciness = "";
        //int value= cbDishCategory.getSelectedIndex();
        if(rbHot.isSelected())
        {
            spiciness = rbHot.getText();
        }
        else if(rbMild.isSelected())
        {
            spiciness = rbMild.getText();
        }
        else if(rbLow.isSelected())
        {
            spiciness = rbLow.getText();
        }
        try
        {
            if(!dishNumberArrayList.contains(Integer.parseInt(dishNumber)))
            {
                if(dishNumber.equals("") || dishNumber.equals("[a-z]") || Integer.parseInt(dishNumber) <= 0)
                {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(this,"Please enter valid dish number.", "Error!", JOptionPane.ERROR_MESSAGE);
                }
                else if(spiciness.equals(""))
                {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(this,"Please select spiciness of the dish.", "Error!", JOptionPane.ERROR_MESSAGE );
                }
                else if(dishName.equals(""))
                {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(this,"Please enter name of the dish.", "Error!", JOptionPane.ERROR_MESSAGE );
                }
                else if(dishCategory.equals("Select Dish Category"))
                {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(this,"Please select dish category.", "Error!", JOptionPane.ERROR_MESSAGE);
                }
                else if(price.equals("") || Integer.parseInt(price) <= 0)
                {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(this,"Please enter valid price of the dish.", "Error!", JOptionPane.ERROR_MESSAGE );
                }
                else
                {
                    //int insertPrice = Integer.parseInt(price);
                    dishNumberArrayList.add(Integer.parseInt(dishNumber));
                    priceArrayList.add(Integer.parseInt(price));
                    categoryArrayList.add(dishCategory);
                    String[] dishDetails = {dishNumber, dishName, dishCategory, spiciness, price};
                    int rowCount = dishTable.getRowCount();
                    int columnCount = dishTable.getColumnCount();
                    int nextRow = 0;
                    boolean emptyRowFlag = false;
                    String s;
                    try
                    {
                        do
                        {
                            s = (String) dishTable.getValueAt(nextRow,0);
                            if(s !=null && s.length() !=0)
                            {
                                nextRow++;
                            }
                            else
                            {
                                emptyRowFlag = true;
                            }
                            tfDishNumber.setText("");
                            tfDishName.setText("");
                            tfPrice.setText("");
                            btnGroupSpiciness.clearSelection();
                            cbDishCategory.setSelectedIndex(0);
                        }
                        while (nextRow < rowCount && !emptyRowFlag);
                        for (int i=0; i<columnCount; i++)
                        {
                            dishTable.setValueAt(dishDetails[i],nextRow,i);
                        }
                        JOptionPane.showMessageDialog(this, "Dish Successfully Added", "Success!", JOptionPane.INFORMATION_MESSAGE);
                    }
                    catch(Exception e)
                    {
                        DefaultTableModel model = (DefaultTableModel) this.dishTable.getModel();
                        model.addRow(new Object[]{"", "", "", "", ""});
                        for (int i=0; i<columnCount; i++)
                        {
                            dishTable.setValueAt(dishDetails[i],nextRow,i);
                        }
                        JOptionPane.showMessageDialog(this, "Dish Successfully Added", "Success!", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
            else
            {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "Dish Number already exists.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(NumberFormatException nfe)
        {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "Please enter valid dish number.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void rbLowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbLowActionPerformed

    private void rbMildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMildActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbMildActionPerformed

    private void rbHotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbHotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbHotActionPerformed

    private void tfDishNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDishNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDishNameActionPerformed

    private void jMenuHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHelpActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "This is a menu information system developed to keep track of various dishes \n"
                + "1) First of all, the menu table has to be filled with available dish.\n"
                + "2) You can search dish by price or category.", "Help", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jMenuHelpActionPerformed

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        File file;
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            file = fileChooser.getSelectedFile();
            try
            {
                //Opening File
                if (Desktop.isDesktopSupported())
                {
                    try
                    {
                        File myFile = new File(file.getAbsolutePath());
                        Desktop.getDesktop().open(myFile);
                    }
                    catch (IOException ex) 
                    {
                        //Showing the path in a dialog box.
                        JOptionPane.showMessageDialog(this, "No application available to open the file you chose.\n"
                                + "Chosen File location: \n" + file.getAbsolutePath(), "Error!", JOptionPane.PLAIN_MESSAGE);
                    }
                }
            }
            catch (HeadlessException ex)
            {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "Problem accessing file", "", JOptionPane.ERROR_MESSAGE);
            }
        } 
        else 
        {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "File access cancelled by user.", "", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        tfDishNumber.setText("");
        tfDishName.setText("");
        tfPrice.setText("");
        btnGroupSpiciness.clearSelection();
        cbDishCategory.setSelectedIndex(0);
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCountActionPerformed
        // TODO add your handling code here:
        sort();
        String categoryToSearch = cbSearchCategory.getSelectedItem().toString();
        int count = 0;
        String[] value = new String[5];
        ArrayList items = new ArrayList();
        for(int i = 0; i < dishTable.getRowCount(); i++)
        {
            for(int j = 0; j < dishTable.getColumnCount(); j++)
            {
                if(dishTable.getValueAt(i, j)!= null)
                {
                    value[j] = dishTable.getValueAt(i, j).toString();
                }
                //If j is same as category Column
                if(j == 2)
                {
                    if(dishTable.getValueAt(i, j)!= null)
                    {
                        if(dishTable.getValueAt(i, j).toString().equals(categoryToSearch))
                        {
                            count++;
                            items.add(value[1]);
                        }
                    }
                }
            }
        }
        if(count > 1)
        {
            String listString = String.join("\n", items);
            JOptionPane.showMessageDialog(this, "There are " + count + " " + categoryToSearch + " dishes:\n" + listString, "Dishes Available", JOptionPane.PLAIN_MESSAGE);
        }
        else if(count == 1)
        {
            String listString = String.join("\n", items);
            JOptionPane.showMessageDialog(this, "There is 1 dish in " + categoryToSearch + " category: " + listString, "Dish Available", JOptionPane.PLAIN_MESSAGE);
        }
        else
        {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "No dish found.", "", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCountActionPerformed
    
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        sort();
        try
        {
        if(tfSearchItem.getText().equals(""))
        {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(rootPane, "Please enter valid price.", "Enter valid amount", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            int key = Integer.parseInt(tfSearchItem.getText());
            int lowest =0;
            int highest = arraySize - 1;
            int found = searchList(lowest, highest, key);
            //-1 is returned when there isn't the same value
            if (found == -1)
            {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "No dish with the price found.", "No dish", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                String tosearch = tfSearchItem.getText();
                for (int i=0; i < dishTable.getRowCount();i++)
                {
                    String foundval=dishTable.getValueAt(i,4).toString();
                    if(foundval.equals(tosearch))
                    {
                        //Displaying dish details
                        JOptionPane.showMessageDialog(rootPane, 
                                "Dish Number: " + dishTable.getValueAt(i,0).toString() + 
                                "\nDish Name: " + dishTable.getValueAt(i,1).toString()+
                                "\nCategory: "+ dishTable.getValueAt(i,2).toString()+
                                "\nSpiciness: " + dishTable.getValueAt(i,3).toString()+
                                "\nPrice: " + dishTable.getValueAt(i,4).toString(), "Dish Found!", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    }
                }
            }
        }
    }
    catch(NumberFormatException ex)
    {
        JOptionPane.showMessageDialog(this, "Please check your price to be searched.", "No dish", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllActionPerformed
        //Setting all the fields to empty string
        for (int i=0; i<dishTable.getRowCount(); i++)
        {
            for(int j=0; j<dishTable.getColumnCount(); j++)
            {
                dishTable.setValueAt("", i, j);
            }
        }
        JOptionPane.showMessageDialog(this, "All Rows Cleared Successfully.", "Success!", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnClearAllActionPerformed

    private void btnClearSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSelectedActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) this.dishTable.getModel();
        int[] rows = dishTable.getSelectedRows();
        System.out.println(Arrays.toString(dishTable.getSelectedRows()));
        for(int i=0;i<rows.length;i++)
        {
            //Clearing rows by adding the same rows which are removed.
            model.removeRow(rows[i]-i);
            model.addRow(new Object[]{"", "", "", "", ""});
            //Removing dishNumber from ArrayList only if it exists
            if(rows[i] <= dishNumberArrayList.size())
            {
                dishNumberArrayList.remove(rows[i]);
            }
        }
        JOptionPane.showMessageDialog(this, "Selected Rows cleared successfully.", "Success!", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnClearSelectedActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Menu Information System V 1.0. \n"
                + "Made by Rajendra, Sangam, Saugat & Srish\n"
                + "GroupWork", "About Us", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void tfDishNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfDishNameKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDishNameKeyTyped

    private void tfDishNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfDishNumberKeyTyped
        // TODO add your handling code here:
        char vChar = evt.getKeyChar(); 
        if (!(Character.isDigit(vChar) || (vChar == KeyEvent.VK_BACK_SPACE) || (vChar == KeyEvent.VK_DELETE))) 
        {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "Please enter valid value.", "Wrong value!", JOptionPane.ERROR_MESSAGE);
            evt.consume();
        }
    }//GEN-LAST:event_tfDishNumberKeyTyped

    private void tfPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPriceKeyTyped
        // TODO add your handling code here:
        char vChar = evt.getKeyChar(); 
        if (!(Character.isDigit(vChar) || (vChar == KeyEvent.VK_BACK_SPACE) || (vChar == KeyEvent.VK_DELETE))) 
        {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "Please enter valid value.", "Wrong value!", JOptionPane.ERROR_MESSAGE);
            evt.consume();
        }        
    }//GEN-LAST:event_tfPriceKeyTyped

    private void tfDishNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDishNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDishNumberActionPerformed

    private void tfSearchItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSearchItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSearchItemActionPerformed

    private void tfSearchItemKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchItemKeyTyped
        // TODO add your handling code here:
        char vChar = evt.getKeyChar(); 
        if (!(Character.isDigit(vChar) || (vChar == KeyEvent.VK_BACK_SPACE) || (vChar == KeyEvent.VK_DELETE))) 
        {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "Please enter valid value.", "Wrong value!", JOptionPane.ERROR_MESSAGE);
            evt.consume();
        }  
    }//GEN-LAST:event_tfSearchItemKeyTyped

    public void sort()
    {
        int row =0;
        // arraysize=0;
        for (int i = 0; i < dishTable.getRowCount(); i++)
        {
             String s = (String)dishTable.getValueAt(row, 4);
              row++;
              if(s!=null && s.length()!=0 )
              {
                arraySize++;
              }
        }
        tablePrice = new int[arraySize];
        int i = 0; row = 0;
        do
        {
            String tmpPrice = (String)dishTable.getValueAt(row,4);
            if(tmpPrice!=null && tmpPrice.length()!=0 )
            {
                tablePrice[i] = Integer.parseInt(tmpPrice);
                i++;
            }
            row++;
        }
        while(row<dishTable.getRowCount());
        SelectionSorter.sort(tablePrice);
   }
    
   public int searchList(int lowest, int highest, int keyToSearch)
   {
       if (lowest<=highest)
       {
          int mid = (lowest+highest)/2;
          if(tablePrice[mid] == keyToSearch)
          {
            return tablePrice[mid];
          }
          else if(tablePrice[mid] > keyToSearch)
          {
            return searchList(lowest, mid-1, keyToSearch) ;
          }
          else if(tablePrice[mid] < keyToSearch)
          {
            return searchList(mid+1, highest, keyToSearch);
          }
       }
   return -1;
   }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClearAll;
    private javax.swing.JButton btnClearSelected;
    private javax.swing.JButton btnCount;
    private javax.swing.ButtonGroup btnGroupSpiciness;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbDishCategory;
    private javax.swing.JComboBox<String> cbSearchCategory;
    private javax.swing.JTable dishTable;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuHelp;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenu jMenuItemHelp;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lbCheckItems;
    private javax.swing.JLabel lblAddMenu;
    private javax.swing.JLabel lblDishCategory;
    private javax.swing.JLabel lblDishName;
    private javax.swing.JLabel lblDishName1;
    private javax.swing.JLabel lblDishNo;
    private javax.swing.JLabel lblI;
    private javax.swing.JLabel lblSpiciness;
    private javax.swing.JLabel logoImg;
    private javax.swing.JPanel panelBG;
    private javax.swing.JPanel panelMenu;
    private javax.swing.JPanel panelSideBar;
    private javax.swing.JRadioButton rbHot;
    private javax.swing.JRadioButton rbLow;
    private javax.swing.JRadioButton rbMild;
    private javax.swing.JTextField tfDishName;
    private javax.swing.JTextField tfDishNumber;
    private javax.swing.JTextField tfPrice;
    private javax.swing.JTextField tfSearchItem;
    // End of variables declaration//GEN-END:variables
}
